{"version":3,"sources":["components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleClick","bind","signUpButton","document","getElementById","signInButton","container","addEventListener","classList","add","remove","className","class","id","action","type","placeholder","onClick","this","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAgFeA,G,kBA3EX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFL,E,2EAMd,IAAMC,EAAeC,SAASC,eAAe,UACvCC,EAAeF,SAASC,eAAe,UACvCE,EAAYH,SAASC,eAAe,aAE1CF,EAAaK,iBAAiB,QAAS,WACtCD,EAAUE,UAAUC,IAAI,wBAGzBJ,EAAaE,iBAAiB,QAAS,WACtCD,EAAUE,UAAUE,OAAO,0B,+BAM5B,OAEI,yBAAKC,UAAU,cACX,yBAAKC,MAAM,YAAYC,GAAG,aACtB,yBAAKD,MAAM,oCACP,0BAAME,OAAO,KACT,8CACA,iEACA,2BAAOC,KAAK,OAAOC,YAAY,SAC/B,2BAAOD,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,6CAGR,yBAAKJ,MAAM,oCACP,0BAAME,OAAO,KACT,uCACA,qDACA,2BAAOC,KAAK,QAAQC,YAAY,UAChC,2BAAOD,KAAK,WAAWC,YAAY,aACnC,6CAGR,yBAAKJ,MAAM,qBACP,yBAAKA,MAAM,WACP,yBAAKA,MAAM,8BACP,6CACA,6FACA,4BAAQA,MAAM,QAAQC,GAAG,SAASI,QAASC,KAAKlB,aAAhD,YAEJ,yBAAKY,MAAM,+BACP,8CACA,oFACA,4BAAQA,MAAM,QAAQC,GAAG,SAASI,QAASC,KAAKlB,aAAhD,eAMhB,yBAAKW,UAAU,gBACX,wBAAIA,UAAU,YACV,6BACA,6BACA,6BACA,6BACA,6BACA,oC,GApEJQ,c,MCaLC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,QCEvB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD2H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5da430aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n\n\nclass Login extends Component {\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    handleClick(){\n        const signUpButton = document.getElementById('signUp');\n        const signInButton = document.getElementById('signIn');\n        const container = document.getElementById('container');\n\n        signUpButton.addEventListener('click', () => {\n\t        container.classList.add(\"right-panel-active\");\n        });\n\n        signInButton.addEventListener('click', () => {\n\t        container.classList.remove(\"right-panel-active\");\n        });\n    }\n\n\n    render() {\n        return (\n\n            <div className=\"login-form\">\n                <div class=\"container\" id=\"container\">\n                    <div class=\"form-container sign-up-container\">\n                        <form action=\"#\">\n                            <h1>Create Account</h1>\n                            <span>use your email for registration</span>\n                            <input type=\"text\" placeholder=\"Name\" />\n                            <input type=\"email\" placeholder=\"Email\" />\n                            <input type=\"password\" placeholder=\"Password\" />\n                            <button>Sign Up</button>\n                        </form>\n                    </div>\n                    <div class=\"form-container sign-in-container\">\n                        <form action=\"#\">\n                            <h1>Sign in</h1>\n                            <span>To use your account</span>\n                            <input type=\"email\" placeholder=\"Email\" />\n                            <input type=\"password\" placeholder=\"Password\" />\n                            <button>Sign In</button>\n                        </form>\n                    </div>\n                    <div class=\"overlay-container\">\n                        <div class=\"overlay\">\n                            <div class=\"overlay-panel overlay-left\">\n                                <h1>Welcome Back!</h1>\n                                <p>To keep connected with us please login with your personal info</p>\n                                <button class=\"ghost\" id=\"signIn\" onClick={this.handleClick}>Sign In</button>\n                            </div>\n                            <div class=\"overlay-panel overlay-right\">\n                                <h1>Hello, Friend!</h1>\n                                <p>Enter your personal details and start journey with us</p>\n                                <button class=\"ghost\" id=\"signUp\" onClick={this.handleClick}>Sign Up</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"floating-box\">\n                    <ul className=\"box-area\">\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                        <li></li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}